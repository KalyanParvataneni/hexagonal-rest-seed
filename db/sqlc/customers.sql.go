// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: customers.sql

package db

import (
	"context"

	"github.com/jackc/pgtype"
)

const createCustomer = `-- name: CreateCustomer :exec
INSERT INTO customers (name,
                       date_of_birth,
                       city,
                       zipcode,
                       status,
                       updated_by)
VALUES ($1,$2,$3,$4,$5,$6)
`

type CreateCustomerParams struct {
	Name        pgtype.Text `json:"name"`
	DateOfBirth pgtype.Date `json:"date_of_birth"`
	City        pgtype.Text `json:"city"`
	Zipcode     pgtype.Text `json:"zipcode"`
	Status      pgtype.Int2 `json:"status"`
	UpdatedBy   pgtype.Text `json:"updated_by"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) error {
	_, err := q.db.Exec(ctx, createCustomer,
		arg.Name,
		arg.DateOfBirth,
		arg.City,
		arg.Zipcode,
		arg.Status,
		arg.UpdatedBy,
	)
	return err
}

const listCustomers = `-- name: ListCustomers :many
SELECT uid,
       name,
       date_of_birth,
       city,
       zipcode,
       status,
       updated_by,
       updated_date
FROM customers
ORDER BY updated_date desc
`

type ListCustomersRow struct {
	Uid         pgtype.UUID        `json:"uid"`
	Name        pgtype.Text        `json:"name"`
	DateOfBirth pgtype.Date        `json:"date_of_birth"`
	City        pgtype.Text        `json:"city"`
	Zipcode     pgtype.Text        `json:"zipcode"`
	Status      pgtype.Int2        `json:"status"`
	UpdatedBy   pgtype.Text        `json:"updated_by"`
	UpdatedDate pgtype.Timestamptz `json:"updated_date"`
}

func (q *Queries) ListCustomers(ctx context.Context) ([]ListCustomersRow, error) {
	rows, err := q.db.Query(ctx, listCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCustomersRow
	for rows.Next() {
		var i ListCustomersRow
		if err := rows.Scan(
			&i.Uid,
			&i.Name,
			&i.DateOfBirth,
			&i.City,
			&i.Zipcode,
			&i.Status,
			&i.UpdatedBy,
			&i.UpdatedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
